These are two pieces of code I wrote for my EPQ project, which was centred around life-like processes that could be achieved using computers.
Whilst I may not have obtained a particularly high grade for my EPQ, I consider it a personal success as I completed it almost in its entirety in Feburary 2018, with no supervision, on a topic that I think ultimately has a much greater scope than I had considered at the time and is now very relevant to our society.

Life.py is a recreation of Conway's Game of Life, a kind of 'game' that produces complexe behaviours from a simple set of rules. When run, the program allows the mouse to draw on the field, a random pattern created with r, and the simulation set in motion with o and paused with p.
Having written this entirely on my own after completing a GCSE that covered only basic built in Python commands, I had to create my own array-like data structure in order to store the grid values properly, and I also
taught myself the pygame module in order to create the visual display.

Neural Net.py is a very basic neural net that is capable of learning how to play noughts and crosses/tic tac toe. To begin with it essentially takes its turns at random. However as the net plays more matches this process becomes less random and it attempts to make sensible decisions. This is achieved using a weighting system, which increases and decreases the liklihood of the net making certain moves based on whether it has won or lost after making that move before. Each boardgame state is coded for using a 9 digit number, meaning the move weightings are for each unique board state.
I chose noughts and crosses as the game to demonstrate a neural net because it is extremely simple, allowing me to spend most of my time on the net itself rather than the game for it to play. It is also a solved game which means it is quite easy to demonstrate its progress in learning, if it is successfully fully trained it should be able to only draw or win. Unfortunately the neural net takes a very long time to learn, a common problem with nets. The net in this instance of the code trains against a true random move maker, which can be started using 't'. It trains for 5000 matches, and usually gets a winrate of about 33% the first time, something that make sense when there are three outcomes, a win, a loss, and a draw. After repeated training cycles its winrate improves, something that can be viewed by pressing the letter 'w'. It will print out its total winrate, and the winrate for just the last 5000 matches. The net usually manages to at least double its winrate, up to 66%, against the random move maker, demonstrating that is has learned something.
I also made an additional variant where the net trains against itself instead of a random number generator, which can improve it better, but can also teach it odd behaviours.
